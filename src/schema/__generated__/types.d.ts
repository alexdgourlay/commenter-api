/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Account: { // root type
    email: string; // String!
    id: string; // ID!
    password?: string | null; // String
  }
  Comment: { // root type
    id: string; // ID!
    postId: string; // String!
  }
  CommentContent: { // root type
    id: string; // ID!
    text: string; // String!
  }
  Domain: { // root type
    domain: string; // String!
    id: string; // ID!
  }
  Mutation: {};
  Post: { // root type
    _count?: NexusGenRootTypes['PostCount'] | null; // PostCount
    id: string; // ID!
    title: string; // String!
  }
  PostCount: { // root type
    comments?: number | null; // Int
  }
  Profile: { // root type
    id: string; // ID!
    name: string; // String!
  }
  Query: {};
  WebAddress: { // root type
    domainId: string; // String!
    hash: string; // String!
    id: string; // ID!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Account: { // field return type
    email: string; // String!
    id: string; // ID!
    password: string | null; // String
    profiles: NexusGenRootTypes['Profile'][]; // [Profile!]!
  }
  Comment: { // field return type
    content: NexusGenRootTypes['CommentContent'] | null; // CommentContent
    id: string; // ID!
    postId: string; // String!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
  }
  CommentContent: { // field return type
    id: string; // ID!
    text: string; // String!
  }
  Domain: { // field return type
    domain: string; // String!
    id: string; // ID!
    webAddresses: NexusGenRootTypes['WebAddress'][]; // [WebAddress!]!
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment']; // Comment!
    createProfile: NexusGenRootTypes['Profile']; // Profile!
  }
  Post: { // field return type
    _count: NexusGenRootTypes['PostCount'] | null; // PostCount
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    id: string; // ID!
    title: string; // String!
    webAddress: NexusGenRootTypes['WebAddress'] | null; // WebAddress
  }
  PostCount: { // field return type
    comments: number | null; // Int
  }
  Profile: { // field return type
    id: string; // ID!
    name: string; // String!
  }
  Query: { // field return type
    account: NexusGenRootTypes['Account'] | null; // Account
    accounts: Array<NexusGenRootTypes['Account'] | null> | null; // [Account]
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    comments: NexusGenRootTypes['Comment'][] | null; // [Comment!]
    domain: NexusGenRootTypes['Domain'] | null; // Domain
    post: NexusGenRootTypes['Post'] | null; // Post
    posts: NexusGenRootTypes['Post'][] | null; // [Post!]
    postsOnDomain: NexusGenRootTypes['Post'][] | null; // [Post!]
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    profiles: Array<NexusGenRootTypes['Profile'] | null> | null; // [Profile]
  }
  WebAddress: { // field return type
    domain: NexusGenRootTypes['Domain'] | null; // Domain
    domainId: string; // String!
    hash: string; // String!
    id: string; // ID!
    post: NexusGenRootTypes['Post'] | null; // Post
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    email: 'String'
    id: 'ID'
    password: 'String'
    profiles: 'Profile'
  }
  Comment: { // field return type name
    content: 'CommentContent'
    id: 'ID'
    postId: 'String'
    profile: 'Profile'
  }
  CommentContent: { // field return type name
    id: 'ID'
    text: 'String'
  }
  Domain: { // field return type name
    domain: 'String'
    id: 'ID'
    webAddresses: 'WebAddress'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createProfile: 'Profile'
  }
  Post: { // field return type name
    _count: 'PostCount'
    comments: 'Comment'
    id: 'ID'
    title: 'String'
    webAddress: 'WebAddress'
  }
  PostCount: { // field return type name
    comments: 'Int'
  }
  Profile: { // field return type name
    id: 'ID'
    name: 'String'
  }
  Query: { // field return type name
    account: 'Account'
    accounts: 'Account'
    comment: 'Comment'
    comments: 'Comment'
    domain: 'Domain'
    post: 'Post'
    posts: 'Post'
    postsOnDomain: 'Post'
    profile: 'Profile'
    profiles: 'Profile'
  }
  WebAddress: { // field return type name
    domain: 'Domain'
    domainId: 'String'
    hash: 'String'
    id: 'ID'
    post: 'Post'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      contentText: string; // String!
      postId?: string | null; // String
      url?: string | null; // String
    }
    createProfile: { // args
      accountId: string; // String!
      name: string; // String!
    }
  }
  Query: {
    account: { // args
      id: string; // ID!
    }
    comment: { // args
      id: string; // ID!
    }
    comments: { // args
      postId: string; // ID!
    }
    domain: { // args
      id: string; // ID!
    }
    post: { // args
      id: string; // ID!
    }
    postsOnDomain: { // args
      domain: string; // String!
    }
    profile: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}